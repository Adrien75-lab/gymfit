# config/packages/security.yaml
security:
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: "auto"
    role_hierarchy:
        ROLE_ADMIN: ROLE_COACH
        ROLE_SUPER_ADMIN: [ROLE_USER, ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]
    providers:
        coaches:
            entity:
                class: App\Entity\Coach
                property: email
        members:
            entity:
                class: App\Entity\Member
                property: email
        app_users:
            chain:
                providers: ['coaches', 'members']
        
        
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
                provider: app_users
        api:
            pattern: ^/api/
            stateless: true
            json_login:
                check_path: /api/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
                provider: app_users
        coaches:
            pattern: ^/coaches
            provider: coaches
            # other firewall options...
        members:
            pattern: ^/members
            provider: members
            # other firewall options...
    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
    # Dans la partie access_control nous définissons les routes protégées
    # - { path: ^/admin, roles: ROLE_ADMIN }
    # - { path: ^/profile, roles: ROLE_USER }
    # La partie role_hierarchy contient la hiérarchie des rôles
    # Un membre sera également utilisateur
    # Un coach sera également membre et donc utilisateur
    # Un employé de la salle sera aussi membre et donc utilisateur

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest